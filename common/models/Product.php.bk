<?php

namespace common\models;

use Yii;
use \yii\helpers\ArrayHelper;

/**
 * This is the model class for table "{{%dtb_product}}".
 *
 * $URL: https://tarax.toyouke.com/svn/MALL/common/models/Product.php $
 * $Id: Product.php 4081 2018-12-19 06:21:54Z kawai $
 *
 * @property integer $product_id
 * @property integer $category_id
 * @property string  $code
 * @property string  $name
 * @property integer $price
 * @property string  $start_date
 * @property string  $expire_date
 *
 * @property customerFavorite[] $customerFavorites
 * @property inventoryItem[] $inventoryItems
 * @property manufactureItem[] $manufactureItems
 * @property mMaterialInventoryItem[] $materialInventoryItems
 * @property category $category
 * @property productDiscount[] $productDiscounts
 * @property productJan[] $productJans
 * @property productPoint[] $productPoints
 * @property purchaseItem[] $purchaseItems
 * @property storageItem[] $ptorageItems
 * @property productMaterial[] $productMaterials
 */

class Product extends \yii\db\ActiveRecord
{
    const DATETIME_MAX = '3000-12-31 00:00:00';
    const EAN13_PREFIX = 24;

    const PKEY_TORANOKO_G_ADMISSION = 265; //とらのこ正会員 年会費
    const PKEY_TORANOKO_N_ADMISSION = 266; //とらのこネットワーク会員 年会費
    const PKEY_TORANOKO_N_UPGRADE   = 643; //とらのこネットワーク会員 正会員へアップグレード
    const PKEY_MACHINE_REMEDY_30C   = 444; // 特別レメディー (30Cまで、単品)
    const PKEY_MACHINE_REMEDY_200C  = 445; // 特別レメディー (200Cまで、単品)
    const PKEY_MACHINE_REMEDY_1M    = 446; // 特別レメディー (1M以上、単品)
    const PKEY_MACHINE_REMEDY_COMB  = 447; // 特別レメディー (コンビ)
    const PKEY_OSECHI               = 1079; // 豊受自然農の無添加おせち

    private $_imgs = null;

    public function init()
    {
        parent::init();
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'dtb_product';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'date'=>[
                'class' => \yii\behaviors\AttributeBehavior::className(),
                'attributes' => [
                    \yii\db\ActiveRecord::EVENT_BEFORE_INSERT => ['update_date'],
                    \yii\db\ActiveRecord::EVENT_BEFORE_UPDATE => ['update_date'],
                ],
                'value' => function ($event) {
                    return date('Y-m-d H:i:s');
                },
            ],
            'sync'=>[
                'class' => ProductMasterSyncronizer::className(),
                'owner' => $this,
            ],
            'img' =>[
                'class' => ProductImageSyncronizer::className(),
                'owner' => $this,
            ],
            'log' => [
                'class'  => ChangeLogger::className(),
                'owner'  => $this,
                'user'   => Yii::$app->has('user') ? Yii::$app->user : null,
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['category_id', 'name', 'kana', 'price', 'start_date', 'expire_date'], 'required'],
            [['category_id', 'price', 'restrict_id','in_stock', 'recommend_flg', 'recommend_seq', 'liquor_flg', 'upper_limit'], 'integer'],
            [['name','kana','summary','description'], 'string'],
            ['kana','filter','filter'=>function($value){ return mb_convert_kana($value,'c'); }],
            ['kana','filter', 'filter'=> function($value) { return \common\components\Romaji2Kana::translate($value,'hiragana'); }],
            ['code','filter','filter'=>function($value){ return strtoupper($value); }],
            ['in_stock','in','range'=>[0,1]],
            [['start_date', 'expire_date'], 'safe'],
            ['start_date','default', 'value'=> date('Y-m-d 00:00:00') ],
            ['start_date','compare', 'compareAttribute'=>"expire_date",'operator'=>'<'],
            ['expire_date','default','value'=> self::DATETIME_MAX ],
            [['code', 'name', 'kana'], 'string', 'max' => 45],
            [['code'], 'unique'],
            ['upper_limit', 'default', 'value' => 10]
        ];
    }

    public function applyDefaultValues()
    {
        $this->code = sprintf('%02d%010d',
                              self::EAN13_PREFIX,
                              Product::find()->select('product_id')->max('product_id') + 1 );
        $this->code .= \common\components\ean13\CheckDigit::generate($this->code);

        $this->start_date  = date('Y-m-d 00:00:00');
        $this->expire_date = self::DATETIME_MAX;
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'category'     => "カテゴリ",
            'name'         => "品名",
            'kana'         => "かな",
            'summary'      => "紹介文",
            'description'  => "詳しい説明",
            'product_id'   => "商品ID",
            'category_id'  => "カテゴリ",
            'subcategories'=> "サブカテゴリー",
            'code'         => "品番",
            'price'        => "価格",
            'start_date'   => "発売日",
            'expire_date'  => "終了日",
            'restrict_id'  => "公開区分",
            'in_stock'     => "在庫",
            'recommend_flg'=> 'おすすめ商品に表示',
            'recommend_seq'=> 'おすすめ商品表示順',
            'liquor_flg'   => 'アルコール商品',
            'upper_limit'  => '購入個数上限'
        ];
    }

    public function attributeHints()
    {
        return [
            'recommend_flg' => 'トップ画面の「おすすめ」に表示されるようになります。'
        ];
    }

    /**------------------ GETTER METHODS ------------------**/

    /* @return string */
    public function getBarcode($seek=true)
    {
        if(($jan = ArrayHelper::getValue($this,'productJan.jan')) && $seek)
            return $jan;

        if(($isbn = ArrayHelper::getValue($this,'bookinfo.isbn')) && $seek)
            return $isbn;

        if(is_numeric($this->code) && (13 == strlen($this->code))) // ean13 is set as product code
            return $this->code;

        $code  = sprintf('%02d%010d', self::EAN13_PREFIX, $this->product_id);
        $code .= \common\components\ean13\CheckDigit::generate($code);

        return $code;
    }

    public function getBookinfo()
    {
        return $this->hasOne(Book::className(), ['product_id' => 'product_id' ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCategory()
    {
        return $this->hasOne(Category::className(), ['category_id' => 'category_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCompany()
    {
        return $this->hasOne(Company::className(), ['company_id' => 'seller_id'])->viaTable('mtb_category', ['category_id' => 'category_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCustomers()
    {
        $pid = $this->product_id;
        $q1 = \common\models\Purchase::find();
        $q2 = \common\models\Pointing::find();

        foreach([$q1, $q2] as $q)
            $q = $q->select('customer_id')
                   ->distinct()
                   ->joinWith([
                       'items'=> function($query) use($pid) { $query->andWhere(['product_id' => $pid]); }
                   ]);

        return \common\models\Customer::find()
               ->orWhere(['customer_id' => $q1])
               ->orWhere(['customer_id' => $q2]);
    }

    public function getDescriptions()
    {
        return $this->hasMany(ProductDescription::className(), ['product_id' => 'product_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDtbCustomerFavorites()
    {
        return $this->hasMany(DtbCustomerFavorite::className(), ['product_id' => 'product_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDtbInventoryItems()
    {
        return $this->hasMany(DtbInventoryItem::className(), ['product_id' => 'product_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDtbManufactureItems()
    {
        return $this->hasMany(ManufactureItem::className(), ['product_id' => 'product_id']);
    }

    /* @return string (might contain Html tags), stllen() up to 50  */
    public function getExcerpt($maxlen = 50)
    {
        $text = $this->summary;
        if(! $text)
            $this->description;

        if(! $text)
            return '';

        $text = trim(mb_convert_kana($text, "s")); // remove spaces
        $text = preg_replace('/<BR>/i', '', $text);

        if($maxlen < mb_strlen($text))
            $text = mb_substr($text, 0, $maxlen) . '...';

        return $text;
    }

    public function getImages()
    {
        return $this->hasMany(ProductImage::className(), ['ean13'=> 'barcode'])
                    ->orderBy(['weight'=>SORT_DESC])
                    ->all();
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getInventories()
    {
        return $this->hasMany(Inventory::className(), ['inventory_id' => 'inventory_id'])->viaTable('dtb_inventory_item', ['product_id' => 'product_id']);
    }

    /* @return ActiveQuery */
    public function getOffer()
    {
        return $this->hasMany(Offer::className(),['category_id'=>'category_id']);
    }

    public function getOfferFor(\common\models\Customer $customer = null, $time = null)
    {
        $query = $this->getOffer();

        if(! $customer)
            return 0;

        if(! $customer->getAttribute('grade_id'))
            return 0;

        if($customer->isAgencyOf($this->seller->company_id))
            return 0;

        return $customer->grade->defaultPointRate;
    }

    /* @return ActiveQuery */
    public function getSeasonalOffer($time=null)
    {
        $ean13   = [];
        $ean13[] = $this->getBarcode(false);

        if($jan = ArrayHelper::getValue($this,'productJan.jan'))
            $ean13[] = $jan;

        if($isbn = ArrayHelper::getValue($this,'bookinfo.isbn'))
            $ean13[] = $jan;

        return OfferSeasonal::find()->where(['ean13'=>$ean13]);
    }

    public function getNext()
    {
        return self::findOne($this->product_id + 1 );
    }

    public function getPickcode()
    {
        if(null !== ($model = $this->hasOne(ProductPickcode::ClassName(), ['product_code'=>'code'])->one()))
            return $model->pickcode;

        return null;
    }

    public function getPrev()
    {
        return self::findOne($this->product_id - 1 );
    }

    public function getStocks()
    {
        return $this->hasMany(Stock::className(), ['product_id' => 'product_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPointingItems()
    {
        $query = $this->hasMany(PointingItem::className(), ['product_id' => 'product_id']);

        $query->joinWith(['pointing' => function ($query) {
            $query->active();
        }]);

        return $query;
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProductJan()
    {
        return $this->hasOne(ProductJan::className(), ['product_id' => 'product_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPurchaseItems()
    {
        return $this->hasMany(PurchaseItem::className(), ['product_id' => 'product_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getRestriction()
    {
        return $this->hasOne(ProductRestriction::className(), ['restrict_id' => 'restrict_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSeller()
    {
        return $this->hasOne(Company::className(), ['company_id' => 'seller_id'])->viaTable('mtb_category', ['category_id'=>'category_id']);
    }

    public function getSubcategories()
    {

        $query = Subcategory::find()
                        ->leftJoin(['ps' => \common\models\ProductSubcategory::tableName()], Subcategory::tableName().'.subcategory_id=ps.subcategory_id')
                        ->leftJoin(['m' => \common\models\ProductMaster::tableName()], 'ps.ean13=m.ean13')
			->leftJoin(['p' => Product::tableName()], 'm.product_id=p.product_id')
			->where(['p.product_id' => $this->product_id]);
	return $query;
        //return $this->hasMany(Subcategory::className(),['subcategory_id'=>'subcategory_id'])
          //          ->viaTable(ProductSubcategory::tableName(),['ean13'=>'code']);
    }

    /* @return int */
    public function getTax()
    {
        return Yii::$app->tax->compute($this->price);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTransferItems()
    {
        return $this->hasMany(TransferItem::className(), ['product_id' => 'product_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTransfers()
    {
        return $this->hasMany(Transfer::className(), ['transfer_id' => 'transfer_id'])->viaTable('dtb_transfer_item', ['product_id' => 'product_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getMtbProductMaterials()
    {
        return $this->hasMany(ProductMaterial::className(), ['product_id' => 'product_id']);
    }

    public function getUrl()
    {
        return \yii\helpers\Url::to(['/product/view','id'=>$this->product_id]);
    }

    public function getProductMaster()
    {
        return $this->hasOne(ProductMaster::className(), ['product_id' => 'product_id']);
    }

    /**------------------ end of GETTER METHODS ------------------**/

    public static function find()
    {
        return new ProductQuery(get_called_class());
    }

    public static function findByBarcode($ean13)
    {
        $prefix = self::EAN13_PREFIX;
        if($prefix == substr($ean13, 0, strlen($prefix)))
        {
            $id = (int) substr($ean13, strlen($prefix), -1); // strip prefix and checkdigit
            return Product::findOne($id);
        }

        return static::find()
            ->joinWith('productJan')
            ->andFilterWhere(['or',
                              ['dtb_product_jan.jan' => $ean13],
                              ['code'                => $ean13],
            ])
            ->one();
    }

    public function isBook()
    {
        return (Category::BOOK == $this->category_id);
    }

    public function isExpired()
    {
        return (strtotime($this->expire_date) <= time());
    }

    /**
     * 商品が酒類であるかどうか
     */
    public function isLiquor()
    {
        return $this->liquor_flg;
    }

    /**
     * 商品がレメディーに分類されるかどうか
     */
    public function isRemedy()
    {
        return (Category::REMEDY == $this->category_id);
    }

    /**
     * 商品がHJ「雑貨」カテゴリに属するか
     * @return boolean
     */
    public function isRemedyVariety()
    {
        return (Category::REMEDY_GOODS == $this->category_id);
/*
        // モデルが無い場合、又は、サブカテゴリーが取得できない場合
    	if(! $this || ! $subcategories = yii\helpers\ArrayHelper::getColumn($this->getSubcategories()->all(), 'subcategory_id'))
    	{
    		Yii::error([
    				sprintf('could not get model from (%s)', $this->name),
    				$this->attributes,
    		], self::className().'::'.__FUNCTION__);
    		return false;
    	}

    	// 商品のサブカテゴリと雑貨系サブカテゴリの配列を比較
        foreach($subcategories as $subcategory_id) {
            if(in_array($subcategory_id,Subcategory::getPkeyRemedyVarieties())) {
                return
            }
        }
        return = in_array(,Subcategory::getPkeyRemedyVarieties())
    	$diff = array_diff(Subcategory::getPkeyRemedyVarieties(), $subcategories);
    	// 商品の属するサブカテゴリーのうちいずれかが対象に含まれていればTRUEを返す
    	if(count($diff) <= count($subcategories)) {
    		return true;
    	} else {
    		return false;
    	}
 */

    }

    public function isRestrictedTo($customer = null)
    {
        if(! $customer)
            return (0 < $this->restrict_id);

        if(($this->restrict_id < ProductRestriction::PKEY_INSTORE_ONLY) &&
            $customer->isAgencyOf($this->seller->company_id))
                return false;

        return ($customer->getAttribute('grade_id') < $this->restrict_id);
    }

    public function in_stock()
    {
        return true;
    }
}

class ProductQuery extends \yii\db\ActiveQuery
{
    public function active($state = true)
    {
        if($state)
            return $this->andWhere('NOW() <= dtb_product.expire_date');
        else
            return $this->andWhere('dtb_product.expire_date < NOW()');
    }

    public function oasis()
    {
        return $this->andWhere(['like','dtb_product.name','Oasis']);
    }

    public function company($pk)
    {
        return $this->andWhere(['category_id'=>
            Category::find()->where(['seller_id'=>$pk])->select('category_id')
        ]);
    }

    // 相談種別一覧を取得
    public function sodanProduct() {
        $this->leftJoin(['m' => \common\models\ProductMaster::tableName()], 'dtb_product.product_id = m.product_id')
             ->leftJoin(['ps' => \common\models\ProductSubcategory::tableName()], 'ps.ean13 = m.ean13')
             ->andWhere(['dtb_product.category_id' => Category::SODAN])
			 ->andWhere('ps.subcategory_id <> ' . Subcategory::PKEY_SODAN_COUPON);
        return $this;
    }

    // 相談クーポン一覧を取得
    public function sodanCoupon() {
        $this->leftJoin(['m' => \common\models\ProductMaster::tableName()], 'dtb_product.product_id = m.product_id')
             ->leftJoin(['ps' => \common\models\ProductSubcategory::tableName()], 'ps.ean13 = m.ean13')
             ->andWhere(['dtb_product.category_id' => Category::SODAN])
			 ->andWhere('ps.subcategory_id = ' . Subcategory::PKEY_SODAN_COUPON);
        return $this;
    }
}
